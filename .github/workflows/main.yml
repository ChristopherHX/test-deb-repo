
# Simple workflow for deploying static content to GitHub Pages
name: Deploy static deb repo to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    # branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.platform.ignore-failure || false }}
    strategy:
      fail-fast: false
      matrix:
        repo:
        - mcpelauncher-manifest
        - mcpelauncher-ui-manifest
        - msa-manifest
        platform:
        - name: focal
          container: buildpack-deps:focal
          deps: apt-get update && apt-get install -y --no-install-recommends g++ clang cmake make git ca-certificates libssl-dev libpng-dev libx11-dev libxi-dev libcurl4-openssl-dev libudev-dev libevdev-dev libegl1-mesa-dev libssl-dev libasound2 qtbase5-dev qtwebengine5-dev qtdeclarative5-dev libqt5svg5-dev qml-module-qtquick2 qml-module-qtquick-layouts qml-module-qtquick-controls qml-module-qtquick-controls2 qml-module-qtquick-window2 qml-module-qtquick-dialogs qml-module-qt-labs-settings qml-module-qt-labs-folderlistmodel qml-module-qtwebengine libssl-dev libcurl4-openssl-dev libuv1-dev libzip-dev libprotobuf-dev protobuf-compiler qtbase5-dev qtwebengine5-dev qtdeclarative5-dev libqt5svg5-dev qml-module-qtquick2 qml-module-qtquick-layouts qml-module-qtquick-controls qml-module-qtquick-controls2 qml-module-qtquick-window2 qml-module-qtquick-dialogs qml-module-qt-labs-settings qml-module-qt-labs-folderlistmodel
          generator: DEB
        - name: focal
          container: ubuntu:focal
          ignore-failure: true
          deps: |
            echo "deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ focal main universe multiverse restricted" > /etc/apt/sources.list
            echo "deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ focal-updates main universe multiverse restricted" >> /etc/apt/sources.list
            echo "deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports/ focal main universe multiverse restricted" >> /etc/apt/sources.list
            echo "deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports/ focal-updates main universe multiverse restricted" >> /etc/apt/sources.list
            dpkg --add-architecture arm64 && dpkg --add-architecture armhf && apt update && DEBIAN_FRONTEND=noninteractive apt install -y docker.io libfuse-dev:arm64 wget texinfo apt-transport-https vim-common qemu-user clang chrpath libstdc++-9-dev:arm64 libatomic1:arm64 wget cmake g++-arm-linux-gnueabihf g++-aarch64-linux-gnu patchelf git cmake pkg-config qtbase5-dev:arm64 qtwebengine5-dev:arm64 libssl-dev:arm64 libcurl4-openssl-dev:arm64 libpng-dev:arm64 libx11-dev:arm64 libxi-dev:arm64 libssl-dev:arm64 libudev-dev:arm64 libevdev-dev:arm64 libegl1-mesa-dev:arm64 libgl1-mesa-dev:arm64 libssl-dev:arm64 libuv1-dev:arm64 libzip-dev:arm64 libprotobuf-dev:arm64 protobuf-compiler qtdeclarative5-dev:arm64 libqt5svg5-dev:arm64 qml-module-qtwebengine:arm64 qml-module-qtquick2:arm64 qml-module-qtquick-layouts:arm64 qml-module-qtquick-controls:arm64 qml-module-qtquick-controls2:arm64 qml-module-qtquick-window2:arm64 qml-module-qtquick-dialogs:arm64 qml-module-qt-labs-settings:arm64 qml-module-qt-labs-folderlistmodel:arm64 jq curl binutils desktop-file-utils squashfs-tools qtdeclarative5-dev-tools:arm64 libssl-dev:arm64 libpulse-dev:arm64
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            echo PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig/ >> $GITHUB_PATH
            echo PATH=/usr/lib/aarch64-linux-gnu/qt5/bin/:$PATH >> $GITHUB_PATH
            curl -L -O https://raw.githubusercontent.com/ChristopherHX/linux-packaging-scripts/main/arm64toolchain.txt
          generator: DEB
          cmakeflags:
            mcpelauncher-manifest: -DCMAKE_ASM_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_C_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_CXX_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_TOOLCHAIN_FILE=$PWD/arm64toolchain.txt -DCPACK_DEBIAN_PACKAGE_ARCHITECTURE=arm64
            mcpelauncher-ui-manifest: -DCMAKE_ASM_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_C_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_CXX_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_TOOLCHAIN_FILE=$PWD/arm64toolchain.txt -DCPACK_DEBIAN_PACKAGE_ARCHITECTURE=arm64
            msa-manifest: -DCMAKE_ASM_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_C_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_CXX_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_TOOLCHAIN_FILE=$PWD/arm64toolchain.txt -DCPACK_DEBIAN_PACKAGE_ARCHITECTURE=arm64
        - name: jammy
          container: buildpack-deps:jammy
          deps: apt-get update && apt-get install -y --no-install-recommends g++ clang cmake make git ca-certificates libssl-dev libpng-dev libx11-dev libxi-dev libcurl4-openssl-dev libudev-dev libevdev-dev libegl1-mesa-dev libssl-dev libasound2 qtbase5-dev qtwebengine5-dev qtdeclarative5-dev libqt5svg5-dev qml-module-qtquick2 qml-module-qtquick-layouts qml-module-qtquick-controls qml-module-qtquick-controls2 qml-module-qtquick-window2 qml-module-qtquick-dialogs qml-module-qt-labs-settings qml-module-qt-labs-folderlistmodel qml-module-qtwebengine libssl-dev libcurl4-openssl-dev libuv1-dev libzip-dev libprotobuf-dev protobuf-compiler qtbase5-dev qtwebengine5-dev qtdeclarative5-dev libqt5svg5-dev qml-module-qtquick2 qml-module-qtquick-layouts qml-module-qtquick-controls qml-module-qtquick-controls2 qml-module-qtquick-window2 qml-module-qtquick-dialogs qml-module-qt-labs-settings qml-module-qt-labs-folderlistmodel
          generator: DEB
        - name: jammy
          container: buildpack-deps:jammy
          deps: apt-get update && apt-get install -y --no-install-recommends g++ clang cmake make git ca-certificates libssl-dev libpng-dev libx11-dev libxi-dev libcurl4-openssl-dev libudev-dev libevdev-dev libegl1-mesa-dev libssl-dev libasound2 qt6-base-dev libqt6opengl6-dev qt6-webengine-dev qt6-webengine-dev-tools qt6-declarative-dev qml6-module-qtquick qml6-module-qtquick-layouts qml6-module-qtquick-controls qml6-module-qtquick-window qml6-module-qtquick-dialogs qml6-module-qt-labs-settings qml6-module-qt-labs-folderlistmodel qml6-module-qtwebengine libssl-dev libcurl4-openssl-dev libuv1-dev libzip-dev libprotobuf-dev protobuf-compiler qt6-base-dev libqt6opengl6-dev qt6-webengine-dev qt6-declarative-dev libqt6svg6-dev qml6-module-qtquick-layouts qml6-module-qtquick-controls qml6-module-qtquick-controls qml6-module-qtquick-dialogs qml6-module-qt-labs-settings qml6-module-qt-labs-folderlistmodel
          generator: DEB
          branch:
            mcpelauncher-manifest: qt6
            mcpelauncher-ui-manifest: qt6
          cmakeflags:
            msa-manifest: -DQT_VERSION=6
          pkg-deps: libc6, ca-certificates, qml6-module-qtquick, qml6-module-qtquick-layouts, qml6-module-qtquick-controls, qml6-module-qtquick-window, qml6-module-qtquick-dialogs, qml6-module-qt-labs-settings, qml6-module-qt-labs-folderlistmodel, qml6-module-qtwebengine, qml6-module-qtquick-layouts, qml6-module-qtquick-controls, qml6-module-qtquick-controls, qml6-module-qtquick-dialogs, qml6-module-qt-labs-settings, qml6-module-qt-labs-folderlistmodel
          suffix: qt6
        - name: jammy
          container: ubuntu:jammy
          ignore-failure: true
          deps: |
            echo "deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ jammy main universe multiverse restricted" > /etc/apt/sources.list
            echo "deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ jammy-updates main universe multiverse restricted" >> /etc/apt/sources.list
            echo "deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy main universe multiverse restricted" >> /etc/apt/sources.list
            echo "deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main universe multiverse restricted" >> /etc/apt/sources.list
            dpkg --add-architecture arm64 && dpkg --add-architecture armhf && apt update && DEBIAN_FRONTEND=noninteractive apt install -y docker.io libfuse-dev:arm64 wget texinfo apt-transport-https vim-common qemu-user clang chrpath libstdc++-10-dev:arm64 libatomic1:arm64 wget cmake g++-arm-linux-gnueabihf g++-aarch64-linux-gnu patchelf git cmake pkg-config qtbase5-dev:arm64 qtwebengine5-dev:arm64 libssl-dev:arm64 libcurl4-openssl-dev:arm64 libpng-dev:arm64 libx11-dev:arm64 libxi-dev:arm64 libssl-dev:arm64 libudev-dev:arm64 libevdev-dev:arm64 libegl1-mesa-dev:arm64 libgl1-mesa-dev:arm64 libssl-dev:arm64 libuv1-dev:arm64 libzip-dev:arm64 libprotobuf-dev:arm64 protobuf-compiler qtdeclarative5-dev:arm64 libqt5svg5-dev:arm64 qml-module-qtwebengine:arm64 qml-module-qtquick2:arm64 qml-module-qtquick-layouts:arm64 qml-module-qtquick-controls:arm64 qml-module-qtquick-controls2:arm64 qml-module-qtquick-window2:arm64 qml-module-qtquick-dialogs:arm64 qml-module-qt-labs-settings:arm64 qml-module-qt-labs-folderlistmodel:arm64 jq curl binutils desktop-file-utils squashfs-tools qtdeclarative5-dev-tools:arm64 libssl-dev:arm64 libpulse-dev:arm64
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            echo PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig/ >> $GITHUB_PATH
            echo PATH=/usr/lib/aarch64-linux-gnu/qt5/bin/:$PATH >> $GITHUB_PATH
            curl -L -O https://raw.githubusercontent.com/ChristopherHX/linux-packaging-scripts/main/arm64toolchain.txt
          generator: DEB
          cmakeflags:
            mcpelauncher-manifest: -DCMAKE_ASM_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_C_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_CXX_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_TOOLCHAIN_FILE=$PWD/arm64toolchain.txt -DCPACK_DEBIAN_PACKAGE_ARCHITECTURE=arm64
            mcpelauncher-ui-manifest: -DCMAKE_ASM_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_C_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_CXX_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_TOOLCHAIN_FILE=$PWD/arm64toolchain.txt -DCPACK_DEBIAN_PACKAGE_ARCHITECTURE=arm64
            msa-manifest: -DCMAKE_ASM_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_C_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_CXX_FLAGS="-latomic --target=aarch64-linux-gnu" -DCMAKE_TOOLCHAIN_FILE=$PWD/arm64toolchain.txt -DCPACK_DEBIAN_PACKAGE_ARCHITECTURE=arm64
        - name: kinetic
          container: buildpack-deps:kinetic
          deps: apt-get update && apt-get install -y --no-install-recommends g++ clang cmake make git ca-certificates libssl-dev libpng-dev libx11-dev libxi-dev libcurl4-openssl-dev libudev-dev libevdev-dev libegl1-mesa-dev libssl-dev libasound2 qt6-base-dev libqt6opengl6-dev qt6-webengine-dev qt6-webengine-dev-tools qt6-declarative-dev qml6-module-qtquick qml6-module-qtquick-layouts qml6-module-qtquick-controls qml6-module-qtquick-window qml6-module-qtquick-dialogs qml6-module-qt-labs-settings qml6-module-qt-labs-folderlistmodel qml6-module-qtwebengine libssl-dev libcurl4-openssl-dev libuv1-dev libzip-dev libprotobuf-dev protobuf-compiler qt6-base-dev libqt6opengl6-dev qt6-webengine-dev qt6-declarative-dev libqt6svg6-dev qml6-module-qtquick-layouts qml6-module-qtquick-controls qml6-module-qtquick-controls qml6-module-qtquick-dialogs qml6-module-qt-labs-settings qml6-module-qt-labs-folderlistmodel
          generator: DEB
          branch:
            mcpelauncher-manifest: qt6
            mcpelauncher-ui-manifest: qt6
          cmakeflags:
            msa-manifest: -DQT_VERSION=6
          pkg-deps: libc6, ca-certificates, qml6-module-qtquick, qml6-module-qtquick-layouts, qml6-module-qtquick-controls, qml6-module-qtquick-window, qml6-module-qtquick-dialogs, qml6-module-qt-labs-settings, qml6-module-qt-labs-folderlistmodel, qml6-module-qtwebengine, qml6-module-qtquick-layouts, qml6-module-qtquick-controls, qml6-module-qtquick-controls, qml6-module-qtquick-dialogs, qml6-module-qt-labs-settings, qml6-module-qt-labs-folderlistmodel
        - name: bullseye
          container: buildpack-deps:bullseye
          deps: apt-get update && apt-get install -y --no-install-recommends g++ clang cmake make git ca-certificates libssl-dev libpng-dev libx11-dev libxi-dev libcurl4-openssl-dev libudev-dev libevdev-dev libegl1-mesa-dev libssl-dev libasound2 qtbase5-dev qtwebengine5-dev qtdeclarative5-dev libqt5svg5-dev qml-module-qtquick2 qml-module-qtquick-layouts qml-module-qtquick-controls qml-module-qtquick-controls2 qml-module-qtquick-window2 qml-module-qtquick-dialogs qml-module-qt-labs-settings qml-module-qt-labs-folderlistmodel qml-module-qtwebengine libssl-dev libcurl4-openssl-dev libuv1-dev libzip-dev libprotobuf-dev protobuf-compiler qtbase5-dev qtwebengine5-dev qtdeclarative5-dev libqt5svg5-dev qml-module-qtquick2 qml-module-qtquick-layouts qml-module-qtquick-controls qml-module-qtquick-controls2 qml-module-qtquick-window2 qml-module-qtquick-dialogs qml-module-qt-labs-settings qml-module-qt-labs-folderlistmodel
          generator: DEB
        - name: bookworm
          container: buildpack-deps:bookworm
          deps: apt-get update && apt-get install -y --no-install-recommends g++ clang cmake make git ca-certificates libssl-dev libpng-dev libx11-dev libxi-dev libcurl4-openssl-dev libudev-dev libevdev-dev libegl1-mesa-dev libssl-dev libasound2 qt6-base-dev libqt6opengl6-dev qt6-webengine-dev qt6-declarative-dev qml6-module-qtquick qml6-module-qtquick-layouts qml6-module-qtquick-controls qml6-module-qtquick-window qml6-module-qtquick-dialogs qml6-module-qt-labs-settings qml6-module-qt-labs-folderlistmodel qml6-module-qtwebengine libssl-dev libcurl4-openssl-dev libuv1-dev libzip-dev libprotobuf-dev protobuf-compiler qt6-base-dev libqt6opengl6-dev qt6-webengine-dev qt6-declarative-dev libqt6svg6-dev qml6-module-qtquick-layouts qml6-module-qtquick-controls qml6-module-qtquick-controls qml6-module-qtquick-dialogs qml6-module-qt-labs-settings qml6-module-qt-labs-folderlistmodel
          generator: DEB
          branch:
            mcpelauncher-manifest: qt6
            mcpelauncher-ui-manifest: qt6
          cmakeflags:
            msa-manifest: -DQT_VERSION=6
          pkg-deps: libc6, ca-certificates, qml6-module-qtquick, qml6-module-qtquick-layouts, qml6-module-qtquick-controls, qml6-module-qtquick-window, qml6-module-qtquick-dialogs, qml6-module-qt-labs-settings, qml6-module-qt-labs-folderlistmodel, qml6-module-qtwebengine, qml6-module-qtquick-layouts, qml6-module-qtquick-controls, qml6-module-qtquick-controls, qml6-module-qtquick-dialogs, qml6-module-qt-labs-settings, qml6-module-qt-labs-folderlistmodel
        - name: fedora-36
          container: fedora:36
          deps: dnf install -y gcc-c++ clang cmake make git ca-certificates libstdc++ glibc-devel libpng-devel zlib-devel libX11-devel libXi-devel libcurl-devel systemd-devel libevdev-devel mesa-libEGL-devel alsa-lib pulseaudio-libs mesa-dri-drivers systemd-devel libXtst-devel openssl-devel qt5-qtbase-devel qt5-qtwebengine-devel qt5-qtdeclarative-devel qt5-qtsvg-devel qt5-qtquickcontrols qt5-qtquickcontrols2 libuv-devel libzip-devel protobuf-devel protobuf-compiler qt5-qtbase-devel qt5-qtwebengine-devel qt5-qtdeclarative-devel qt5-qtsvg-devel qt5-qtquickcontrols qt5-qtquickcontrols2 fedora-packager rpmdevtools
          generator: RPM
        - name: fedora-37
          container: fedora:37
          deps: dnf install -y gcc-c++ clang cmake make git ca-certificates libstdc++ glibc-devel libpng-devel zlib-devel libX11-devel libXi-devel libcurl-devel systemd-devel libevdev-devel mesa-libEGL-devel alsa-lib pulseaudio-libs mesa-dri-drivers systemd-devel libXtst-devel openssl-devel qt5-qtbase-devel qt5-qtwebengine-devel qt5-qtdeclarative-devel qt5-qtsvg-devel qt5-qtquickcontrols qt5-qtquickcontrols2 libuv-devel libzip-devel protobuf-devel protobuf-compiler qt5-qtbase-devel qt5-qtwebengine-devel qt5-qtdeclarative-devel qt5-qtsvg-devel qt5-qtquickcontrols qt5-qtquickcontrols2 fedora-packager rpmdevtools
          generator: RPM

    container: ${{ matrix.platform.container}}
    steps:
    - name: Install Deps
      run: ${{ matrix.platform.deps }}
      shell: bash
    - name: Get Sources
      run: |
        git clone --recursive https://github.com/minecraft-linux/${{ matrix.repo }} mcpelauncher ${{ matrix.platform.branch[matrix.repo] && format('-b {0}', matrix.platform.branch[matrix.repo]) }}
        mv mcpelauncher/CMakeLists.txt mcpelauncher/CMakeLists.org.txt
    - name: Create CMakeLists.txt
      run: |
        cmake_minimum_required(VERSION 3.0)
        project(${{ matrix.repo }}${{ matrix.platform.suffix && format('-{0}', matrix.platform.suffix) }})
        include(./CMakeLists.org.txt)

        set(CPACK_GENERATOR "TGZ;${{ matrix.platform.generator }}")
        set(CPACK_PACKAGE_CONTACT "https://github.com/minecraft-linux/${{ matrix.repo }}/issues")
        set(CPACK_DEBIAN_PACKAGE_DEPENDS "${{ matrix.platform.pkg-deps || 'libc6, ca-certificates, qml-module-qtquick2, qml-module-qtquick-layouts, qml-module-qtquick-controls, qml-module-qtquick-controls2, qml-module-qtquick-window2, qml-module-qtquick-dialogs, qml-module-qt-labs-settings, qml-module-qt-labs-folderlistmodel' }}")
        set(CPACK_DEBIAN_PACKAGE_VERSION "0.8.2.${{ github.run_id }}.${{ github.run_attempt }}~${{ matrix.platform.name }}")
        set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)
        set(CPACK_RPM_PACKAGE_VERSION "0.8.2.${{ github.run_id }}.${{ github.run_attempt }}~${{ matrix.platform.name }}")
        set(CPACK_RPM_SPEC_MORE_DEFINE "%define __spec_install_post /bin/true")
        set(CPACK_RPM_REQUIRES_EXCLUDE_FROM "share/mcpelauncher/.*")
        set(CPACK_RPM_FILE_NAME RPM-DEFAULT)

        include(CPack)
      shell: cp {0} mcpelauncher/CMakeLists.txt
    - name: Configure
      run: CC=clang CXX=clang++ cmake -S mcpelauncher -B mcpelauncher-build -DCMAKE_BUILD_TYPE=Release ${{ matrix.platform.cmakeflags[matrix.repo] }}
    - name: Package Source
      if: "false"
      run: cmake --build mcpelauncher-build --target package_source --parallel
    - name: Build
      run: cmake --build mcpelauncher-build --target package --parallel
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.platform.name }}
        path: |
          mcpelauncher-build/*.tar.*
          mcpelauncher-build/*.deb
          mcpelauncher-build/*.rpm

  # Single deploy job since we're just deploying
  deploy:
    needs: build-linux
    # Allow one concurrent deployment
    concurrency:
      group: "pages"
      cancel-in-progress: true
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    env:
      BASE_URL: https://${{ github.repository_owner }}.github.io${{ github.repository_owner != github.event.repository.name && format('/{0}', github.event.repository.name) || '' }}
      REPO_NAME: ${{ github.repository_owner != github.event.repository.name && format('{0}-{1}', github.repository_owner, github.event.repository.name) || github.repository_owner }}
    steps:
      - name: Import gpg private key
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Download package
        uses: actions/download-artifact@v3
        with:
          path: packages

      - name: create release index
        uses: actions/github-script@v6
        id: release-index
        with:
          github-token: _
          script: |
            var rootUrl = "${{ env.BASE_URL }}";
            var channelconfig = {
              nightly: 2,
              releases: 5,
            };
            var path = require("path");
            var fs = require("fs");
            var index = {};
            try {
              const response = await fetch(`${rootUrl}/index.json`);
              index = await response.json();
            } catch {
              console.log("Previous index is unavailable");
            }
            const globber = await glob.create("packages/**", { matchDirectories: false });
            var packages = [];
            for await (const file of globber.globGenerator()) {
              var rfile = path.relative(path.join(process.cwd(), "packages"), file);
              packages.push(rfile);
            }
            if(index.versions) {
              for(var channel in index.versions) {
                var builds = index.versions[channel];
                if(builds) {
                  if(builds.length > (channelconfig[channel] || 1)) {
                    builds.shift();
                  }
                  for(var build of builds) {
                    if(build.buildfiles) {
                      for(var f of build.buildfiles) {
                        console.log(JSON.stringify(f));
                        var fullpath = path.join("packages", f.pkgpath);
                        fs.mkdirSync(path.dirname(fullpath), {recursive: true});
                        await exec.exec("curl", ["-L", `${rootUrl}/${f.path}`, "--output", fullpath]);
                      }
                    }
                  }
                }
              }
            }
            return { packages: packages, index };
      
      - name: add cppfw repo to install myci scripts from
        uses: myci-actions/add-deb-repo@master
        with:
          repo: deb http://gagis.hopto.org/repo/cppfw/$(lsb_release --id --short | tr '[:upper:]' '[:lower:]') $(lsb_release --codename --short) main
          repo-name: cppfw
          keys-asc: http://gagis.hopto.org/repo/cppfw/pubkey.gpg
      - name: install debian package tools
        run: |
          sudo apt --quiet update
          sudo apt --quiet install --assume-yes dpkg-dev debhelper devscripts myci rpm
      - name: Install freight
        run: |
          git clone https://github.com/freight-team/freight.git
          make -C freight && sudo make -C freight install
          rm -rf freight

      - name: Add package
        run: |
          mkdir webpage
          myci-freight-add.sh --base-dir $PWD --repo webpage/deb --distro focal --component main packages/focal/*.deb
          myci-freight-add.sh --base-dir $PWD --repo webpage/deb --distro jammy --component main packages/jammy/*.deb
          myci-freight-add.sh --base-dir $PWD --repo webpage/deb --distro kinetic --component main packages/kinetic/*.deb
          myci-freight-add.sh --base-dir $PWD --repo webpage/deb --distro bullseye --component main packages/bullseye/*.deb
          myci-freight-add.sh --base-dir $PWD --repo webpage/deb --distro bookworm --component main packages/bookworm/*.deb

          first_key_email=$(gpg --list-keys | sed -E -n -e 's/.*<([^ >]*)>.*/\1/p' | head -1)
          echo "%_signature gpg" > ~/.rpmmacros
          echo "%_gpg_name \"$first_key_email\"" >> ~/.rpmmacros
          rpm --addsign packages/fedora-36/*.rpm packages/fedora-37/*.rpm
          mkdir -p webpage/fedora-36
          mv packages/fedora-36/*.rpm webpage/fedora-36
          mkdir -p webpage/fedora-37
          mv packages/fedora-37/*.rpm webpage/fedora-37
          docker run --rm -v $PWD/webpage:/webpage fedora:37 bash -c "dnf install -y createrepo && createrepo /webpage/fedora-36 && createrepo /webpage/fedora-37"
          sudo chown -R "$UID:$UID" webpage/fedora-36
          sudo chown -R "$UID:$UID" webpage/fedora-37
      - name: Add default html
        run: |
          <html>
          <body>
          <h1>Debian and Ubuntu apt repos</h1>
          <p>deb ${{ env.BASE_URL }}/deb focal main</p>
          <p>deb ${{ env.BASE_URL }}/deb jammy main</p>
          <p>deb ${{ env.BASE_URL }}/deb kinetic main</p>
          <p>deb ${{ env.BASE_URL }}/deb bullseye main</p>
          <p>deb ${{ env.BASE_URL }}/deb bookworm main</p>
          <p>curl -sS ${{ env.BASE_URL }}/deb/pubkey.gpg | sudo tee -a /etc/apt/trusted.gpg.d/${{ env.REPO_NAME }}.asc</p>
          <h1>Fedora</h1>
          <h2>36</h2>
          <p>
          [${{ env.REPO_NAME }}]<br/>
          name=${{ env.REPO_NAME }}<br/>
          baseurl=${{ env.BASE_URL }}/fedora-36<br/>
          enabled=1<br/>
          countme=1<br/>
          repo_gpgcheck=0<br/>
          type=rpm<br/>
          gpgcheck=1<br/>
          skip_if_unavailable=False<br/>
          gpgkey=${{ env.BASE_URL }}/deb/pubkey.gpg<br/>
          </p>
          <h2>37</h2>
          <p>
          [${{ env.REPO_NAME }}]<br/>
          name=${{ env.REPO_NAME }}<br/>
          baseurl=${{ env.BASE_URL }}/fedora-37<br/>
          enabled=1<br/>
          countme=1<br/>
          repo_gpgcheck=0<br/>
          type=rpm<br/>
          gpgcheck=1<br/>
          skip_if_unavailable=False<br/>
          gpgkey=${{ env.BASE_URL }}/deb/pubkey.gpg<br/>
          </p>
          </body>
          </html>
        shell: cp {0} webpage/index.html

      - name: create archive index
        uses: actions/github-script@v6
        with:
          github-token: _
          script: |
            var path = require("path");
            var fs = require("fs");
            var releaseIndex = JSON.parse(${{ toJSON(steps.release-index.outputs.result) }});
            var index = releaseIndex.index || {};
            const globber = await glob.create("webpage/**", { matchDirectories: false });
            var allfiles = [];
            var buildmap = {};
            var buildfiles = [];
            for(pkg of releaseIndex.packages) {
              buildmap[path.basename(pkg)] = pkg;
            }
            for await (const file of globber.globGenerator()) {
              var rfile = path.relative(path.join(process.cwd(), "webpage"), file);
              allfiles.push(rfile);
              var pkgpath = buildmap[path.basename(file)];
              if(pkgpath) {
                buildfiles.push({ pkgpath, path: rfile });
              }
            }
            index.allfiles = allfiles;
            index.packages = releaseIndex.packages;
            var channel = "nightly";
            if(!index.versions) {
              index.versions = {};
            }
            var builds = index.versions[channel];
            if(!builds) {
              builds = index.versions[channel] = [];
            }
            builds.push({ buildfiles });
            fs.writeFileSync("webpage/index.json", JSON.stringify(index));

      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: 'webpage'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
